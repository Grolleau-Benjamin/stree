name: release
on:
  push:
    tags: ["v*.*.*"]

jobs:
  guard:
    runs-on: ubuntu-latest
    outputs:
      on_main: ${{ steps.check.outputs.on_main }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - run: git fetch origin main --depth=1
      - id: check
        shell: bash
        run: |
          SHA="$(git rev-list -n1 "${GITHUB_REF_NAME}")"
          if git merge-base --is-ancestor "$SHA" origin/main; then
            echo "on_main=true" >> "$GITHUB_OUTPUT"
          else
            echo "on_main=false" >> "$GITHUB_OUTPUT"
          fi
  
  build:
    needs: guard
    if: ${{ needs.guard.outputs.on_main == 'true' }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            use_cross: true
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            use_cross: true
          - os: macos-latest
            target: x86_64-apple-darwin
            use_cross: false
          - os: macos-latest
            target: aarch64-apple-darwin
            use_cross: false
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        if: ${{ matrix.use_cross }}
        uses: taiki-e/install-action@v2
        with:
          tool: cross

      - name: Build
        run: |
          if [ "${{ matrix.use_cross }}" = "true" ]; then
            cross build --release --locked --target ${{ matrix.target }}
          else
            cargo build --release --locked --target ${{ matrix.target }}
          fi

      - name: Strip
        run: |
          BIN="target/${{ matrix.target }}/release/stree"
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            strip "$BIN" || true
          else
            strip -x "$BIN" || true
          fi

      - name: Package
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          PKG="stree-${TAG}-${{ matrix.target }}"
          mkdir -p pack
          cp "target/${{ matrix.target }}/release/stree" pack/
          cp LICENSE pack/ || true
          tar -C pack -czf "${PKG}.tar.gz" .
          shasum -a 256 "${PKG}.tar.gz" > "${PKG}.sha256"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: stree-${{ github.ref_name }}-${{ matrix.target }}
          path: |
            stree-${{ github.ref_name }}-${{ matrix.target }}.tar.gz
            stree-${{ github.ref_name }}-${{ matrix.target }}.sha256

  release:
    needs: [guard, build]
    if: ${{ needs.guard.outputs.on_main == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Extract changelog for current tag
        shell: bash
        run: |
          TAG="${GITHUB_REF_NAME}"
          VER="${TAG#v}"

          if [ ! -f CHANGELOG.md ]; then
            echo "No CHANGELOG.md found" > RELEASE_NOTES.md
            exit 0
          fi

          awk -v ver="$VER" '
            BEGIN{p=0}
            { sub(/\r$/,"") }
            /^##[[:space:]]/ {
              if (p && $0 !~ "\\[" ver "\\]") exit
              if ($0 ~ "\\[" ver "\\]") p=1
            }
            p { print }
          ' CHANGELOG.md > RELEASE_NOTES.md

          if ! grep -q "^##[[:space:]]" RELEASE_NOTES.md; then
            echo "No changelog entry for $VER" > RELEASE_NOTES.md
          fi
 
      - name: Publish GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*
          body_path: RELEASE_NOTES.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
